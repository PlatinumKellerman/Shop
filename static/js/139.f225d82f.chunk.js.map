{"version":3,"file":"static/js/139.f225d82f.chunk.js","mappings":"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","sources":["components/Loader/index.js","components/Loader/Loader.jsx","constants/apiConstants.js","components/MovieDetails/MovieCastList/MovieCastList.styled.js","components/MovieDetails/MovieCastList/index.js","components/MovieDetails/MovieCastList/MovieCastList.jsx","pages/MovieInfo/MovieCast/MovieCast.styled.js","pages/MovieInfo/MovieCast/MovieCast.jsx","pages/MovieInfo/MovieCast/index.js","services/fetchMovies.js"],"sourcesContent":["import Loader from './Loader';\n\nexport default Loader;\n","import { ThreeCircles } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <>\n      <ThreeCircles\n        height=\"50\"\n        width=\"50\"\n        color=\"#86C232\"\n        wrapperStyle={{\n          display: 'flex',\n          justifyContent: 'center',\n        }}\n        wrapperClass=\"\"\n        visible={true}\n        ariaLabel=\"three-circles-rotating\"\n        outerCircleColor=\"\"\n        innerCircleColor=\"#86C232\"\n        middleCircleColor=\"\"\n      />\n    </>\n  );\n};\n\nexport default Loader;\n","const constants = {\n  movieBaseUrl: 'https://api.themoviedb.org/3',\n  lang: 'en',\n  weatherBaseUrl: 'https://api.openweathermap.org/data/2.5/',\n  movieApiKey: process.env.REACT_APP_MOVIE_API_KEY,\n  weatherApiKey: process.env.REACT_APP_WEATHER_API_KEY,\n};\n\nexport default constants;\n","import styled from 'styled-components';\n\nexport const CastWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  font-family: ${p => p.theme.fonts.body};\n  font-size: ${p => p.theme.fontSizes.m};\n  color: ${p => p.theme.colors.light};\n  text-shadow: ${p => p.theme.colors.dark} 1px 0px 0px,\n    ${p => p.theme.colors.dark} 0px 1px 0px,\n    ${p => p.theme.colors.dark} 0px -1px 0px,\n    ${p => p.theme.colors.dark} -1px 0px 0px;\n  transition-duration: 250ms;\n  transition-property: color;\n  &:hover,\n  &:focus,\n  &:active {\n    color: ${p => p.theme.colors.primary};\n    cursor: default;\n  }\n`;\n\nexport const CastList = styled.ul`\n  width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  display: grid;\n  gap: 30px;\n  max-width: calc(100vw - 20px);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  @media (min-width: ${p => p.theme.breakpoints.values.md}px) {\n    max-width: calc(100vw - 90px);\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  }\n`;\n\nexport const CastListItem = styled.li`\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Photo = styled.img`\n  max-width: 300px;\n  object-fit: fill;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus,\n  &:active {\n    transform: scale(1.02);\n  }\n  border-radius: 50px;\n  margin-bottom: 10px;\n  @media (min-width: ${p => p.theme.breakpoints.values.md}px) {\n    max-width: 300px;\n    height: 450px;\n  }\n`;\n\nexport const ActorPlug = styled.img`\n  max-width: 300px;\n  object-fit: fill;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus,\n  &:active {\n    transform: scale(1.01);\n  }\n  border-radius: 50px;\n  margin-bottom: 10px;\n  @media (min-width: ${p => p.theme.breakpoints.values.md}px) {\n    max-width: 300px;\n    height: 450px;\n  }\n`;\n","import MovieCastList from './MovieCastList';\n\nexport default MovieCastList;\n","import Container from 'layout/common/Container/Container';\nimport actor_plug from '../../../assets/actor-plug-min.jpg';\nimport {\n  CastWrapper,\n  CastList,\n  CastListItem,\n  Photo,\n  ActorPlug,\n} from './MovieCastList.styled';\n\nconst MovieCastList = ({ cast }) => {\n  return (\n    <Container>\n      <CastList>\n        {cast.length > 0 &&\n          cast.map(({ id, name, character, profile_path }) => (\n            <CastListItem key={id}>\n              <CastWrapper>\n                {profile_path ? (\n                  <Photo\n                    src={`https://www.themoviedb.org/t/p/original${profile_path}`}\n                    alt={name}\n                  />\n                ) : (\n                  <ActorPlug src={actor_plug} alt={'Actor Plug'} />\n                )}\n                <p>{name}</p>\n                <p>{`(${character})`}</p>\n              </CastWrapper>\n            </CastListItem>\n          ))}\n      </CastList>\n    </Container>\n  );\n};\n\nexport default MovieCastList;\n","import styled from 'styled-components';\n\nexport const CastPlug = styled.p`\n  color: ${p => p.theme.colors.accent};\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  font-size: 24px;\n  font-weight: 600;\n  margin: 20px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getMovieCast } from '../../../services/fetchMovies';\nimport Loader from 'components/Loader';\nimport MovieCastList from 'components/MovieDetails/MovieCastList';\nimport { CastPlug } from './MovieCast.styled';\n\nconst MovieCast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const movieCastResp = async () => {\n      try {\n        const response = await getMovieCast(movieId);\n        setCast(response.cast);\n        setIsLoading(false);\n      } catch (error) {\n        toast.error('Oops! Something went wrong!');\n      }\n    };\n    movieCastResp();\n    setIsLoading(true);\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {cast.length > 0 ? (\n        <MovieCastList cast={cast} />\n      ) : (\n        <CastPlug>Sorry. We don't have any cast for this movie. </CastPlug>\n      )}\n    </div>\n  );\n};\n\nexport default MovieCast;\n","import MovieCast from './MovieCast';\n\nexport default MovieCast;\n","import axios from 'axios';\nimport constants from '../constants/apiConstants';\n\nconst instance = axios.create({\n  baseURL: constants.movieBaseUrl,\n  language: 'en-US',\n  params: {\n    api_key: constants.movieApiKey,\n    language: constants.lang,\n    page: 1,\n  },\n});\n\nexport async function getMostPopularMovies(pageNumber) {\n  const params = { ...instance.defaults.params };\n  params.page = pageNumber;\n\n  const response = await instance.get(`/trending/movie/week`, { params });\n\n  return response.data.results;\n}\n\nexport async function getMovieDetailsById(id) {\n  const response = await instance.get(`/movie/${id}`);\n  return response.data;\n}\n\n// export async function getMoviesByName(query) {\n//   const response = await instance.get(`/search/movie`, {\n//     params: {\n//       query,\n//     },\n//   });\n//   return response.data.results;\n// }\n\nexport async function searchMoviesAndTVShows(query) {\n  const response = await instance.get(`/search/multi`, {\n    params: {\n      query,\n    },\n  });\n  return response.data.results;\n}\n\nexport async function getMostPopularTvShows() {\n  const response = await instance.get('/tv/top_rated');\n  return response.data.results;\n}\n\nexport async function getTvShowById(id) {\n  const response = await instance.get(`/tv/${id}`);\n  return response.data;\n}\n\nexport async function getMovieReviews(id) {\n  const response = await instance.get(`/movie/${id}/reviews`);\n  return response.data;\n}\n\nexport async function getMovieCast(id) {\n  const response = await instance.get(`/movie/${id}/credits`);\n  return response.data;\n}\n\nexport async function getTvShowReviews(id) {\n  const response = await instance.get(`/tv/${id}/reviews`);\n  return response.data;\n}\n\nexport async function getTvShowCast(id) {\n  const response = await instance.get(`/tv/${id}/credits`);\n  return response.data;\n}\n\nexport async function getActorId(query) {\n  const response = await instance.get('/search/person', {\n    params: {\n      query,\n    },\n  });\n  return response.data.results;\n}\n\nexport async function getImages(movie_id) {\n  const response = await instance.get(`/movie/${movie_id}/images`, {\n    params: {\n      movie_id,\n    },\n  });\n  return response.data;\n}\n"],"names":["height","width","color","wrapperStyle","display","justifyContent","wrapperClass","visible","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","movieBaseUrl","lang","weatherBaseUrl","movieApiKey","process","weatherApiKey","CastWrapper","styled","p","theme","fonts","body","fontSizes","m","colors","light","dark","primary","CastList","breakpoints","values","md","CastListItem","Photo","ActorPlug","cast","Container","length","map","id","name","character","profile_path","src","alt","actor_plug","CastPlug","accent","movieId","useParams","useState","setCast","isLoading","setIsLoading","useEffect","movieCastResp","getMovieCast","response","toast","Loader","instance","axios","baseURL","constants","language","params","api_key","page","getMostPopularMovies","pageNumber","defaults","get","data","results","getMovieDetailsById","searchMoviesAndTVShows","query","getMostPopularTvShows","getTvShowById","getMovieReviews","getTvShowReviews","getTvShowCast","getImages","movie_id"],"sourceRoot":""}